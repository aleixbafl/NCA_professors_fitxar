package nca_professors_fitxar;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

public class inici extends javax.swing.JFrame {
    File usuariLogin = new File("usuari.txt");
    public inici() {
        initComponents();
        if (usuariLogin.exists()) {
            lleguirUsuari(usuariLogin.getPath());
        }
        
        iniciar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e){
                conexioBD conexio = new conexioBD();
                try {
                    if (dni.getText().equals("")) {
                        missatge("Has d'inserir un DNI.");
                    } else {
                        conexio.obrirConexio();
                        ResultSet resultat = conexio.ecjecutarConsulta("SELECT dni FROM professor WHERE dni LIKE \"" + dni.getText() + "\"; ");
                        if (resultat.next()){
                            guardarUsuari(resultat.getString(WIDTH));
                            conexio.tancaConexio();
                            
                            /*
                            Comprovar si hi ha un arxiu al projecte amb el nom horari i amb l'extensió xlsx o ods.
                            En cas de no existir li demanarà a l'usuari que li digui on el té guardat (l'arxiu ha 
                            de ser horari.xlsx/ods) i copiar i enganxarà a l'arrel del projecte.
                            */
                            
                            horari();
                            
                            metodeSegonaPantalla();
                            
                            dispose();
                        } else {
                            missatge("El DNI introduït és erroni o no existeix.");
                        }
                    }
                } catch (SQLException ex) {
                    missatge("A agut un error a la connexió a la Base de Dades.");
                    System.out.println(ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(inici.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        dni = new javax.swing.JTextField();
        iniciar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setSize(new java.awt.Dimension(500, 600));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Iniciar Sessió");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        dni.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dni.setToolTipText("Inserir DNI");

        iniciar.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        iniciar.setText("Iniciar Sessió");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(iniciar, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(dni))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(dni, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(200, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        

    }//GEN-LAST:event_iniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        inici pantalla = new inici();
        pantalla.sessio();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dni;
    private javax.swing.JButton iniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    private void sessio() {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inici().setVisible(true);
            }
        });
    }

    private void missatge(String missatge) {
        JOptionPane.showMessageDialog(rootPane, missatge);
    }

    private boolean finestraSiNo(String missatge) {
        int opcio = JOptionPane.showConfirmDialog(null, missatge, "Confirmación", JOptionPane.YES_NO_OPTION);
        if (opcio == 0) {
            return true;
        } else {
            return false;
        }
    }

    private void guardarUsuari(String string) {
        try {
            FileWriter fw = new FileWriter("usuari.txt");
            fw.write(string);
            fw.close();
        } catch (IOException e){
            missatge("A agut un error en guardar les credencials de l'usuari.");
        }
    }
    
    private void lleguirUsuari(String string) {
        if (finestraSiNo("Vols recuperar les credencials d'inici de sessió?")) {
            try {
                FileReader fr = new FileReader(usuariLogin);
                BufferedReader bf = new BufferedReader(fr);
                dni.setText(bf.readLine());
                bf.close();
                fr.close();
            } catch (IOException e){
                missatge("A agut un error en llegir les credencials guardades.");
            }
        } else {
            usuariLogin.delete();
        }
    }

    public void metodeSegonaPantalla() {
        ImageIcon icon = new ImageIcon("hora.png");
        principal pantallaPrincipal = new principal();
        Dimension minSize = new Dimension(500, 600);
        pantallaPrincipal.setMinimumSize(minSize);
        pantallaPrincipal.setTitle("Pantalla d'Inici - Fitxar");
        pantallaPrincipal.setIconImage(icon.getImage());
        pantallaPrincipal.setVisible(true);
        
    }
    
    private void horari() {
        File arxiu = new File("horari.xlsx");
        if (arxiu.exists()) {
            if (finestraSiNo("Vols canviar l'horari que hi ha guardat?")) {
                arxiuHorari(arxiu, true);
            }
        } else {
            arxiuHorari(arxiu, false);
        }
    }

    private void arxiuHorari(File arxiu, boolean canviarHorari) {
        JFileChooser fileChooser = new JFileChooser();
            int seleccion = 1;
            do{
                seleccion = fileChooser.showOpenDialog(inici.this);
                if (seleccion == 0) {
                    arxiu = fileChooser.getSelectedFile();
                    //System.out.println(arxiu.getName());
                    String arxiuSplit[] = arxiu.getName().split("\\.");
                    if (arxiuSplit.length != 2) {
                        missatge("L'arxiu sol pot tenir 1 \".\", Ex.: nom.extensió");
                        seleccion = 1;
                    }else {
                        if (!arxiuSplit[0].equals("horari")) {
                            missatge("El nom de l'arxiu ha de ser \"horari\".");
                            seleccion = 1;
                        } else {
                            switch (arxiuSplit[arxiuSplit.length - 1]){
                                case "xlsx":
                                    seleccion = guardarArxiuProjecte(arxiu, arxiuSplit[arxiuSplit.length - 1]);
                                    break;
                                default:
                                    missatge("L'arxiu ha de tenir l'extensió xlsx.");
                                    seleccion = 1;
                            }
                        }
                    }
                } else {
                    if (canviarHorari) {
                        if (!finestraSiNo("Realment vols canviar l'horari?")) {
                            seleccion = 0;
                        }
                    } else {
                        missatge("S'ha de seleccionar un arxiu.");
                    }
                }
            } while(seleccion != 0);
    }

    private int guardarArxiuProjecte(File arxiu, String extencio) {
        Path rutaProjecte = Paths.get("horari." + extencio);
        try {
            Files.copy(arxiu.toPath(), rutaProjecte, StandardCopyOption.REPLACE_EXISTING);
            return 0;
        } catch (Exception e){
            missatge("A agut un error en guardar l'arxiu.");
        }
        return 1;
    }
}
